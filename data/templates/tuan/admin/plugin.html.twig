{% include '@admin/inc/header.html.twig' %}
<div class="layui-layout layui-layout-admin">
    <div class="layui-header">
        <div class="layui-logo layui-hide-xs layui-bg-black">TuanICP</div>
        <!-- 头部区域（可配合layui 已有的水平导航） -->
        {% include '@admin/inc/top_nav.html.twig' %}

    </div>
    <div class="layui-side layui-bg-black">
        <div class="layui-side-scroll">
            {% include '@admin/inc/left_menu.html.twig' %}
        </div>
    </div>
    <div class="layui-body">
        <!-- 内容主体区域 -->
        <div style="padding: 15px;">
            <blockquote class="layui-elem-quote layui-text">
                欢迎使用 TuanICP v1.0.7
            </blockquote>
            <fieldset class="layui-elem-field layui-field-title" style="margin-top: 20px;">
                <legend>插件搜索</legend>
            </fieldset>
            <div style="padding: 16px;">
                <form class="layui-form layui-row layui-col-space16" id="table-search">
                    <div class="layui-col-md6">
                        <div class="layui-input-wrap">
                            <div class="layui-input-prefix">
                                <i class="layui-icon layui-icon-username"></i>
                            </div>
                            <input type="text" name="plugin_name" value="" placeholder="插件名称" class="layui-input"
                                   lay-affix="clear">
                        </div>
                    </div>
                    <div class="layui-btn-container layui-col-xs12">
                        <button class="layui-btn" lay-submit lay-filter="table-search">搜索</button>
                        <button type="reset" class="layui-btn layui-btn-primary">清空</button>
                    </div>
                </form>
                <table class="layui-hide" id="plugin_table" lay-filter="plugin_table"></table>
            </div>
            <script type="text/html" id="toolbar">
                <div class="layui-btn-container">
                    <button class="layui-btn layui-btn-sm layui-btn-primary" id="rowMode">
                        <span>{{ '{{= d.lineStyle ? \'多行\' : \'单行\' }}' }}</span>
                        <i class="layui-icon layui-icon-down layui-font-12"></i>
                    </button>
                </div>
            </script>
            <script type="text/html" id="is_active">
                {% if d.is_active %}
                    <a class="layui-btn layui-btn-xs layui-btn-primary layui-border-blue">已启用</a>
                {% else %}
                    <a class="layui-btn layui-btn-primary layui-btn-xs layui-border">已禁用</a>
                {% endif %}
            </script>
            <script type="text/html" id="tools">
                {% if d.is_active %}
                    <a class="layui-btn layui-btn-xs layui-btn-danger" lay-event="deactivate">禁用</a>
                {% else %}
                    <a class="layui-btn layui-btn-xs layui-btn-normal" lay-event="activate">启用</a>
                {% endif %}
                <!-- 添加详细信息按钮 -->
                <a class="layui-btn layui-btn-xs layui-btn-warm" lay-event="detail">详细信息</a>
            </script>


            </script>

            <script>
                layui.use(['table', 'dropdown', 'form', 'layer'], function () {
                    var table = layui.table;
                    var form = layui.form;
                    var dropdown = layui.dropdown;

                    // 创建渲染实例
                    table.render({
                        elem: '#plugin_table',
                        url: '{{ admin.api.get_plugins }}',
                        toolbar: '#toolbar',
                        defaultToolbar: ['filter', 'exports', 'print'],
                        height: 'full-35', // 最大高度减去其他容器已占有的高度差
                        css: [ // 重设当前表格样式
                            '.layui-table-tool-temp{padding-right: 145px;}'
                        ].join(''),
                        cellMinWidth: 50,
                        totalRow: false, // 开启合计行
                        page: true,
                        cols: [[
                            {type: 'checkbox', fixed: 'left'},
                            {field: 'plugin_name', width: 130, title: '插件名'},
                            {field: 'plugin_info', title: '插件描述', minWidth: 260, expandedWidth: 260},
                            {field: 'is_active', width: 100, title: '状态', templet: '#is_active'},
                            {field: 'plugin_author', width: 130, title: '作者'},
                            {field: 'plugin_version', width: 110, title: '版本'},
                            {field: 'plugin_entry', width: 1, title: '插件入口文件', hide: true},
                            {fixed: 'right', title: '操作', width: 160, minWidth: 125, templet: '#tools'}
                        ]],

                        done: function () {
                            var id = this.id;

                            // 行模式
                            dropdown.render({
                                elem: '#rowMode',
                                data: [{
                                    id: 'default-row',
                                    title: '单行模式（默认）'
                                }, {
                                    id: 'multi-row',
                                    title: '多行模式'
                                }],
                                // 菜单被点击的事件
                                click: function (obj) {
                                    var checkStatus = table.checkStatus(id)
                                    var data = checkStatus.data; // 获取选中的数据
                                    switch (obj.id) {
                                        case 'default-row':
                                            table.reload('plugin_table', {
                                                lineStyle: null // 恢复单行
                                            });
                                            layer.msg('已设为单行');
                                            break;
                                        case 'multi-row':
                                            table.reload('plugin_table', {
                                                // 设置行样式，此处以设置多行高度为例。若为单行，则没必要设置改参数 - 注：v2.7.0 新增
                                                lineStyle: 'height: 95px;'
                                            });
                                            layer.msg('已切换至多行模式');
                                            break;
                                    }
                                }
                            });
                        },
                        error: function (res, msg) {
                            console.log(res, msg)
                        }
                    });
                    // 触发单元格工具事件
                    table.on('tool(plugin_table)', function (obj) {
                        var data = obj.data; // 获得当前行数据
                        if (obj.event === 'activate') {
                            layer.confirm('确定要启用插件 - 插件名：' + data.plugin_name + ' 么？', function (index) {
                                layer.msg('已提交，服务器处理中');
                                layer.close(index);
                                // 向服务端发送指令
                                var customData = {
                                    action: 'activate',
                                    plugin_name: data.plugin_name,
                                    plugin_entry: data.plugin_entry,
                                };
                                $.ajax({
                                    type: 'POST',
                                    url: '/api/v1/plugin.php', // 后端处理脚本的 URL
                                    data: customData, // 发送表单数据
                                    dataType: 'json', // 预期服务器返回的数据类型
                                    success: function (response) {
                                        // 根据后端响应弹出提示窗口
                                        if (response.status === 'success') {
                                            layer.msg(response.message, {icon: 1});
                                        } else {
                                            layer.msg(response.message, {icon: 2});
                                        }
                                    },
                                    error: function () {
                                        layer.msg('请求失败，请稍后再试', {icon: 2});
                                    }
                                });
                                setTimeout(() => {
                                    table.reload('plugin_table');
                                }, 300);
                            });
                        } else if (obj.event === 'deactivate') {
                            layer.confirm('确定要禁用插件 - 插件名：' + data.plugin_name + ' 么？', function (index) {
                                layer.msg('已提交，服务器处理中');
                                layer.close(index);
                                // 向服务端发送指令
                                var customData = {
                                    action: 'deactivate',
                                    plugin_name: data.plugin_name,
                                    plugin_entry: data.plugin_entry,
                                };
                                $.ajax({
                                    type: 'POST',
                                    url: '/api/v1/plugin.php', // 后端处理脚本的 URL
                                    data: customData, // 发送表单数据
                                    dataType: 'json', // 预期服务器返回的数据类型
                                    success: function (response) {
                                        // 根据后端响应弹出提示窗口
                                        if (response.status === 'success') {
                                            layer.msg(response.message, {icon: 1});
                                        } else {
                                            layer.msg(response.message, {icon: 2});
                                        }
                                    },
                                    error: function () {
                                        layer.msg('请求失败，请稍后再试', {icon: 2});
                                    }
                                });
                                setTimeout(() => {
                                    table.reload('plugin_table');
                                }, 300);
                            });
                        } else if (obj.event === 'detail') {
                            layer.open({
                                type: 0, // page 层类型
                                area: ['500px', '300px'],
                                title: 'Hello layer',
                                shade: 0.6, // 遮罩透明度
                                shadeClose: true, // 点击遮罩区域，关闭弹层
                                anim: 0, // 0-6 的动画形式，-1 不开启
                                content: '<div style="padding: 32px;">一个普通的页面层，传入了自定义的 HTML</div>'
                            });
                        }
                    });

                    // table 滚动时移除内部弹出的元素
                    var tableInst = table.getOptions('plugin_table');
                    tableInst.elem.next().find('.layui-table-main').on('scroll', function () {
                        dropdown.close('dropdown-table-tool');
                    });
                    // 搜索提交
                    form.on('submit(table-search)', function (data) {
                        var field = data.field; // 获得表单字段
                        // 执行搜索重载
                        table.reload('plugin_table', {
                            page: {
                                curr: 1 // 重新从第 1 页开始
                            },
                            where: field // 搜索的字段
                        });
                        // layer.msg('搜索成功<br>此处为静态模拟数据，实际使用时换成真实接口即可');
                        return false; // 阻止默认 form 跳转
                    });
                });
            </script>
            <div style="height: 50px"></div>
        </div>
    </div>
    <div class="layui-footer">
        <!-- 底部固定区域 -->
        <p>“自由”二字看似条条框框，但总有一笔冲出牢笼。</p>
    </div>
</div>

</body>
</html>